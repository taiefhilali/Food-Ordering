import React, { useEffect, useState } from 'react';
import { io } from 'socket.io-client';
import axios from 'axios';
import '../Chat/chat.css';
import DefaultLayout from '@/layouts/DefaultLayout';
import Breadcrumb from '../../components/Breadcrumbs/Breadcrumb';
import UserList from './UserList'; // Import the UserList component

const ENDPOINT = 'http://localhost:8000'; // Replace with your server URL

interface Message {
  _id?: string; // Make _id optional since it's generated by MongoDB
  sender: string;
  content: string;
  timestamp: Date;
}

interface User {
  _id: string;
  username: string;
  imageUrl: string;
}

const ChatComponent: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [users, setUsers] = useState<User[]>([]); // State for users
  const socket = io(ENDPOINT);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get<User[]>(`${ENDPOINT}/clients`);
        setUsers(response.data);
        console.log('userss::',response.data)
      } catch (error) {
        console.error('Error fetching users:', error);
      }
    };

    fetchUsers();

    // Listen for incoming messages
    socket.on('chat message', (message: Message) => {
      setMessages(prevMessages => [...prevMessages, message]);
    });

    // Clean up on unmount
    return () => {
      socket.disconnect();
    };
  }, []);

  const sendMessage = (content: string) => {
    const userId = localStorage.getItem('userId'); // Retrieve userId from local storage
    if (!userId) {
      console.error('User ID not found in local storage');
      return;
    }

    const message: Message = {
      sender: userId,
      content,
      timestamp: new Date(),
    };

    // Emit message to server
    socket.emit('chat message', message);

    // Update local state immediately
    setMessages(prevMessages => [...prevMessages, message]);
  };

  function formatTimestamp(timestamp: Date): string {
    const options: Intl.DateTimeFormatOptions = {
      hour: 'numeric',
      minute: 'numeric',
      hour12: true, // Use 12-hour format
    };

    return new Intl.DateTimeFormat('en-US', options).format(timestamp);
  }

  return (
    <DefaultLayout>
      <Breadcrumb pageName='Chat ' />
      <div className="chat-layout">
        <UserList users={users} /> {/* Add the UserList component */}
        <div className="chat-container">
          <ul className="message-list">
            {messages.map((message, index) => (
              <li key={message._id || index} className="message-item">
                <div className="message-sender-container">
                  <div className="message-sender">{message.sender}</div>
                  <div className="message-timestamp">{formatTimestamp(message.timestamp)}</div>
                </div>
                <div className="message-content">{message.content}</div>
              </li>
            ))}
          </ul>
          <input
            type="text"
            className="message-input"
            placeholder="Type your message here..."
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                sendMessage(e.currentTarget.value);
                e.currentTarget.value = '';
              }
            }}
          />
        </div>
      </div>
    </DefaultLayout>
  );
};

export default ChatComponent;